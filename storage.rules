rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidFileType() {
      return request.resource.contentType.matches('application/pdf') 
          || request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.presentationml.presentation')
          || request.resource.contentType.matches('application/vnd.ms-powerpoint');
    }

    function isValidLinkSubmission() {
      return request.resource.metadata.isLink == true;
    }

    // Pitch deck rules
    match /pitch-decks/{userId}/{fileName} {
      allow read: if isAuthenticated() 
                  && (isOwner(userId) || resource.metadata.isPublic == true);
      allow write: if isAuthenticated() 
                   && isOwner(userId) 
                   && (isValidFileType() || isValidLinkSubmission())
                   && (isValidLinkSubmission() || request.resource.size < 10 * 1024 * 1024); // 10MB limit for files only
    }

    match /{allPaths=**} {
      allow read, write: if false;  // Secure default rule
    }
  }
} 